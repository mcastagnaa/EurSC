}
result.df = base::round(result.df, digits)
result.df
#TreynorRatio(Ra, Rb, Rf = Rf, scale = 54, modified = FALSE)
textplot(result.df, rmar = 0.8, cmar = 1.5,  max.cex=.9,
halign = "center", valign = "top", row.valign="center",
wrap.rownames=15, wrap.colnames=10, mar = c(0,0,3,0)+0.1)
title(main="Single Factor Model Related Statistics")
library(ggplot2)
library(reshape2)
library(plyr)
library(zoo)
library(PerformanceAnalytics)
library(scales)
library(quantmod)
library(Hmisc)
rm(list =ls(all=TRUE))
RawData <- read.csv("RawData.csv", header=TRUE)
RawData$Date <- as.Date(RawData$Date, format="%d/%m/%Y")
n <-nrow(RawData)
head(RawData)
rownames(RawData) <- RawData$Date
#DOESN'T WORK periodReturn(as.ts(RawData[, 2:3]), period='monhtly')
# there must be something better than this!
RawData$IGNISret <- c(NA,RawData$IGNIS[2:n]/RawData$IGNIS[1:n-1]-1)
RawData$BARINGret <- c(NA,RawData$BARING[2:n]/RawData$BARING[1:n-1]-1)
RawData$THREADret <- c(NA,RawData$THREAD[2:n]/RawData$THREAD[1:n-1]-1)
RawData$LAZARDret <- c(NA,RawData$LAZARD[2:n]/RawData$LAZARD[1:n-1]-1)
RawData$HENDERret <- c(NA,RawData$HENDER[2:n]/RawData$HENDER[1:n-1]-1)
RawData$BLACKRret <- c(NA,RawData$BLACKR[2:n]/RawData$BLACKR[1:n-1]-1)
RawData$JCSCEXPTret <- c(NA,RawData$JCSCEXPT[2:n]/RawData$JCSCEXPT[1:n-1]-1)
RawData$IGNISrr <- RawData$IGNISret - RawData$JCSCEXPTret
RawData$BARINGrr <- RawData$BARINGret - RawData$JCSCEXPTret
RawData$THREADrr <- RawData$THREADret - RawData$JCSCEXPTret
RawData$LAZARDrr <- RawData$LAZARDret - RawData$JCSCEXPTret
RawData$HENDERrr <- RawData$HENDERret - RawData$JCSCEXPTret
RawData$BLACKRrr <- RawData$BLACKRret - RawData$JCSCEXPTret
head(RawData)
# relative returns data frame
RawData.rret <- subset(RawData, select=c(IGNISrr,
BARINGrr,
THREADrr,
LAZARDrr,
HENDERrr,
BLACKRrr))
rownames(RawData.rret) <- RawData$Date
# absolute returns data frame
RawData.r <- subset(RawData, select=c(IGNISret,
BARINGret,
THREADret,
LAZARDret,
HENDERret,
BLACKRret,
JCSCEXPTret))
RawData.r$Rf <- rep(0,nrow(RawData.r))
rownames(RawData.r) <- RawData$Date
# rolling standard deviation
RollingObs <- 54
RollSd <- data.frame(cbind(RawData$Date,
rollapplyr(RawData[c("IGNISret",
"BARINGret",
"THREADret",
"LAZARDret",
"HENDERret",
"BLACKRret",
"JCSCEXPTret")],
RollingObs, sd, fill=NA)))
colnames(RollSd)[1] <- "Date"
RollSd$Date <- as.Date(RollSd$Date)
head(RollSd)
chart.CumReturns(RawData.r,
wealth.index = TRUE,
legend.loc = "topleft",
begin = "first",
main="Value of $1",
ylab = "absolute returns",
xlab = NULL,
date.format = "%b/%y")
chart.CumReturns(RawData.rret,
wealth.index = TRUE,
legend.loc = "topleft",
begin = "first",
main="Value of $1",
ylab = "'alpha' returns",
xlab = NULL,
date.format = "%b/%y")
chart.Correlation(RawData.rret, histogram = TRUE)
meltdf<-melt(RollSd,id="Date")
ggplot(na.omit(meltdf),
aes(x=Date, y=value, colour=variable, group=variable, size = variable, linetype = variable)) +
geom_line() +
ylab(paste0("Rolling sd (", toString(RollingObs), "obs)")) +
scale_linetype_manual(values= c(rep("solid",6), "dotted")) +
scale_size_manual(values= c(1, rep(0.5, 5), 1)) +
theme(legend.position="bottom") +
scale_colour_brewer(palette="Set1")
chart.RiskReturnScatter(RawData.rret,
add.boxplot = TRUE,
sharpe.ratio = NULL)
chart.Boxplot(RawData.rret)
chart.Boxplot(RawData.rret, sort.by = "variance")
chart.Boxplot(RawData.rret, sort.by = "variance", as.Tufte = TRUE)
chart.Boxplot(RawData.rret, sort.by = "variance")
View(RawData.rret)
chart.RollingPerformance(RawData.rret,
legend.loc = "topright",
begin = "first",
main="rolling 12-weeks performance",
ylab = "'alpha' returns",
xlab = NULL,
date.format = "%b/%y")
# table.SFM(na.omit(RawData.r[, 1:2]),
#           na.omit(RawData.r[,7]),
#           scale = 54,
#           Rf = 0,
#           digits = 4)
library(PerformanceAnalytics)
RawData.r$Rf <- c(NA, rep(0,334))
Ra <- checkData(RawData.r[, 1:6])
Rf <- checkData(RawData.r[,8, drop = F])
Rb <- checkData(RawData.r[,7, drop = F])
if(!is.null(dim(Rf)))
Rf = checkData(Rf)
# Get dimensions and labels
columns.a = ncol(Ra)
columns.b = ncol(Rb)
columnnames.a = colnames(Ra)
columnnames.b = colnames(Rb)
Ra.excess = Return.excess(Ra, Rf)
Rb.excess = Return.excess(Rb, Rf)
scale = NA
digits = 4
if(is.na(scale)) {
freq = periodicity(Ra)
switch(freq$scale,
minute = {stop("Data periodicity too high")},
hourly = {stop("Data periodicity too high")},
daily = {scale = 252},
weekly = {scale = 52},
monthly = {scale = 12},
quarterly = {scale = 4},
yearly = {scale = 1}
)
}
for(column.a in 1:columns.a) { # for each asset passed in as R
for(column.b in 1:columns.b) { # against each asset passed in as Rb
merged.assets = merge(Ra.excess[,column.a,drop=FALSE], Rb.excess[,column.b,drop=FALSE])
merged.assets = as.data.frame(na.omit(merged.assets)) # leaves the overlapping period
# these should probably call CAPM.alpha and CAPM.beta for consistency (not performance)
model.lm = lm(merged.assets[,1] ~ merged.assets[,2])
alpha = coef(model.lm)[[1]]
beta = coef(model.lm)[[2]]
CAPMbull = CAPM.beta.bull(Ra[,column.a], Rb[,column.b],Rf) #inefficient, recalcs excess returns and intercept
CAPMbear = CAPM.beta.bear(Ra[,column.a], Rb[,column.b],Rf) #inefficient, recalcs excess returns and intercept
htest = cor.test(merged.assets[,1], merged.assets[,2])
#active.premium = (Return.annualized(merged.assets[,1,drop=FALSE], scale = scale) - Return.annualized(merged.assets[,2,drop=FALSE], scale = scale))
active.premium = ActivePremium(Ra=Ra[,column.a],Rb=Rb[,column.b], scale = scale)
#tracking.error = sqrt(sum(merged.assets[,1] - merged.assets[,2])^2/(length(merged.assets[,1])-1)) * sqrt(scale)
tracking.error = TrackingError(Ra[,column.a], Rb[,column.b],scale=scale)
#treynor.ratio = Return.annualized(merged.assets[,1,drop=FALSE], scale = scale)/beta
#treynor.ratio = TreynorRatio(Ra=Ra[,column.a], Rb=Rb[,column.b], Rf = Rf, scale = scale)
z = c(
alpha,
beta,
CAPMbull,
CAPMbear,
summary(model.lm)$r.squared,
((1+alpha)^scale - 1),
htest$estimate,
htest$p.value,
tracking.error,
active.premium,
active.premium/tracking.error#,
#treynor.ratio
)
znames = c(
"Alpha",
"Beta",
"Beta+",
"Beta-",
"R-squared",
"Annualized Alpha",
"Correlation",
"Correlation p-value",
"Tracking Error",
"Active Premium",
"Information Ratio"#,
#"Treynor Ratio"
)
if(column.a == 1 & column.b == 1) {
result.df = data.frame(Value = z, row.names = znames)
colnames(result.df) = paste(columnnames.a[column.a], columnnames.b[column.b], sep = " to ")
}
else {
nextcolumn = data.frame(Value = z, row.names = znames)
colnames(nextcolumn) = paste(columnnames.a[column.a], columnnames.b[column.b], sep = " to ")
result.df = cbind(result.df, nextcolumn)
}
}
}
result.df = base::round(result.df, digits)
textplot(result.df, rmar = 0.8, cmar = 1.5,  max.cex=.9,
halign = "center", valign = "top", row.valign="center",
wrap.rownames=15, wrap.colnames=10, mar = c(0,0,3,0)+0.1)
title(main="Single Factor Model Related Statistics")
#TreynorRatio(Ra, Rb, Rf = Rf, scale = 54, modified = FALSE)
library(ggplot2)
library(reshape2)
library(plyr)
library(zoo)
library(PerformanceAnalytics)
library(scales)
library(quantmod)
library(Hmisc)
#Data management
rm(list =ls(all=TRUE))
RawData <- read.csv("RawData.csv", header=TRUE)
RawData$Date <- as.Date(RawData$Date, format="%d/%m/%Y")
n <-nrow(RawData)
head(RawData)
rownames(RawData) <- RawData$Date
#DOESN'T WORK periodReturn(as.ts(RawData[, 2:3]), period='monhtly')
# there must be something better than this!
RawData$IGNISret <- c(NA,RawData$IGNIS[2:n]/RawData$IGNIS[1:n-1]-1)
RawData$BARINGret <- c(NA,RawData$BARING[2:n]/RawData$BARING[1:n-1]-1)
RawData$THREADret <- c(NA,RawData$THREAD[2:n]/RawData$THREAD[1:n-1]-1)
RawData$LAZARDret <- c(NA,RawData$LAZARD[2:n]/RawData$LAZARD[1:n-1]-1)
RawData$HENDERret <- c(NA,RawData$HENDER[2:n]/RawData$HENDER[1:n-1]-1)
RawData$BLACKRret <- c(NA,RawData$BLACKR[2:n]/RawData$BLACKR[1:n-1]-1)
RawData$GARTPRret <- c(NA,RawData$GARTPAN[2:n]/RawData$GARTPAN[1:n-1]-1)
RawData$JCSCEXPTret <- c(NA,RawData$JCSCEXPT[2:n]/RawData$JCSCEXPT[1:n-1]-1)
RawData$IGNISrr <- RawData$IGNISret - RawData$JCSCEXPTret
RawData$BARINGrr <- RawData$BARINGret - RawData$JCSCEXPTret
RawData$THREADrr <- RawData$THREADret - RawData$JCSCEXPTret
RawData$LAZARDrr <- RawData$LAZARDret - RawData$JCSCEXPTret
RawData$HENDERrr <- RawData$HENDERret - RawData$JCSCEXPTret
RawData$BLACKRrr <- RawData$BLACKRret - RawData$JCSCEXPTret
RawData$GARTPRrr <- RawData$GARTPret - RawData$JCSCEXPTret
head(RawData)
# relative returns data frame
RawData.rret <- subset(RawData, select=c(IGNISrr,
BARINGrr,
THREADrr,
LAZARDrr,
HENDERrr,
BLACKRrr,
GARTPRrr))
rownames(RawData.rret) <- RawData$Date
# absolute returns data frame
RawData.r <- subset(RawData, select=c(IGNISret,
BARINGret,
THREADret,
LAZARDret,
HENDERret,
BLACKRret,
GARTPRrr,
JCSCEXPTret))
RawData.r$Rf <- rep(0,nrow(RawData.r))
rownames(RawData.r) <- RawData$Date
# rolling standard deviation
RollingObs <- 54
RollSd <- data.frame(cbind(RawData$Date,
rollapplyr(RawData[c("IGNISret",
"BARINGret",
"THREADret",
"LAZARDret",
"HENDERret",
"BLACKRret",
"GARTPRret",
"JCSCEXPTret")],
RollingObs, sd, fill=NA)))
colnames(RollSd)[1] <- "Date"
RollSd$Date <- as.Date(RollSd$Date)
head(RollSd)
# charts
chart.Correlation(RawData.rret, histogram = TRUE)
chart.CumReturns(RawData.rret,
wealth.index = TRUE,
legend.loc = "topleft",
begin = "first",
main="Value of $1",
ylab = "'alpha' returns",
xlab = NULL,
date.format = "%b/%y")
chart.CumReturns(RawData.r,
wealth.index = TRUE,
legend.loc = "topleft",
begin = "first",
main="Value of $1",
ylab = "absolute returns",
xlab = NULL,
date.format = "%b/%y")
meltdf<-melt(RollSd,id="Date")
library(ggplot2)
library(reshape2)
library(plyr)
library(zoo)
library(PerformanceAnalytics)
library(scales)
library(quantmod)
library(Hmisc)
#Data management
rm(list =ls(all=TRUE))
RawData <- read.csv("RawData.csv", header=TRUE)
RawData$Date <- as.Date(RawData$Date, format="%d/%m/%Y")
n <-nrow(RawData)
head(RawData)
rownames(RawData) <- RawData$Date
#DOESN'T WORK periodReturn(as.ts(RawData[, 2:3]), period='monhtly')
# there must be something better than this!
RawData$IGNISret <- c(NA,RawData$IGNIS[2:n]/RawData$IGNIS[1:n-1]-1)
RawData$BARINGret <- c(NA,RawData$BARING[2:n]/RawData$BARING[1:n-1]-1)
RawData$THREADret <- c(NA,RawData$THREAD[2:n]/RawData$THREAD[1:n-1]-1)
RawData$LAZARDret <- c(NA,RawData$LAZARD[2:n]/RawData$LAZARD[1:n-1]-1)
RawData$HENDERret <- c(NA,RawData$HENDER[2:n]/RawData$HENDER[1:n-1]-1)
RawData$BLACKRret <- c(NA,RawData$BLACKR[2:n]/RawData$BLACKR[1:n-1]-1)
RawData$GARTPret <- c(NA,RawData$GARTPAN[2:n]/RawData$GARTPAN[1:n-1]-1)
RawData$JCSCEXPTret <- c(NA,RawData$JCSCEXPT[2:n]/RawData$JCSCEXPT[1:n-1]-1)
RawData$IGNISrr <- RawData$IGNISret - RawData$JCSCEXPTret
RawData$BARINGrr <- RawData$BARINGret - RawData$JCSCEXPTret
RawData$THREADrr <- RawData$THREADret - RawData$JCSCEXPTret
RawData$LAZARDrr <- RawData$LAZARDret - RawData$JCSCEXPTret
RawData$HENDERrr <- RawData$HENDERret - RawData$JCSCEXPTret
RawData$BLACKRrr <- RawData$BLACKRret - RawData$JCSCEXPTret
RawData$GARTPRrr <- RawData$GARTPret - RawData$JCSCEXPTret
head(RawData)
RawData.rret <- subset(RawData, select=c(IGNISrr,
BARINGrr,
THREADrr,
LAZARDrr,
HENDERrr,
BLACKRrr,
GARTPRrr))
rownames(RawData.rret) <- RawData$Date
# absolute returns data frame
RawData.r <- subset(RawData, select=c(IGNISret,
BARINGret,
THREADret,
LAZARDret,
HENDERret,
BLACKRret,
GARTPret,
JCSCEXPTret))
RawData.r$Rf <- rep(0,nrow(RawData.r))
rownames(RawData.r) <- RawData$Date
# rolling standard deviation
RollingObs <- 54
RollSd <- data.frame(cbind(RawData$Date,
rollapplyr(RawData[c("IGNISret",
"BARINGret",
"THREADret",
"LAZARDret",
"HENDERret",
"BLACKRret",
"GARTPret",
"JCSCEXPTret")],
RollingObs, sd, fill=NA)))
colnames(RollSd)[1] <- "Date"
RollSd$Date <- as.Date(RollSd$Date)
head(RollSd)
# charts
chart.Correlation(RawData.rret, histogram = TRUE)
chart.CumReturns(RawData.rret,
wealth.index = TRUE,
legend.loc = "topleft",
begin = "first",
main="Value of $1",
ylab = "'alpha' returns",
xlab = NULL,
date.format = "%b/%y")
chart.CumReturns(RawData.r,
wealth.index = TRUE,
legend.loc = "topleft",
begin = "first",
main="Value of $1",
ylab = "absolute returns",
xlab = NULL,
date.format = "%b/%y")
meltdf<-melt(RollSd,id="Date")
ggplot(na.omit(meltdf),
aes(x=Date, y=value, colour=variable, group=variable, size = variable, linetype = variable)) +
geom_line() +
ylab(paste0("Rolling sd (", toString(RollingObs), "obs)")) +
scale_linetype_manual(values= c(rep("solid",7), "dotted")) +
scale_size_manual(values= c(1, rep(0.5, 5), 1)) +
theme(legend.position="bottom") +
scale_colour_brewer(palette="Set1")
ggplot(na.omit(meltdf),
aes(x=Date, y=value, colour=variable, group=variable, size = variable, linetype = variable)) +
geom_line() +
ylab(paste0("Rolling sd (", toString(RollingObs), "obs)")) +
scale_linetype_manual(values= c(rep("solid",7), "dotted")) +
scale_size_manual(values= c(1, rep(0.5, 6), 1)) +
theme(legend.position="bottom") +
scale_colour_brewer(palette="Set1")
# extra charts
charts.PerformanceSummary(RawData.rret)
chart.Boxplot(RawData.rret, sort.by = "variance")
chart.RiskReturnScatter(RawData.rret,
add.boxplot = TRUE,
sharpe.ratio = NULL)
chart.RollingPerformance(RawData.rret,
legend.loc = "topright",
begin = "first",
main="rolling 12-weeks performance",
ylab = "'alpha' returns",
xlab = NULL,
date.format = "%b/%y")
# tables
t(table.CalendarReturns(RawData.rret))
result <- t(table.Stats(RawData.rret[, , drop = F]))
textplot(format.df(result, na.blank=TRUE, numeric.dollar=FALSE, cdec=c(rep(1,2),rep(3,14))),
rmar = 0.8, cmar = 1.5,  max.cex=.9, halign = "center", valign = "top",
row.valign="center", wrap.rownames=10, wrap.colnames=10, mar = c(0,0,3,0)+0.1)
title(main="Statistics for relative returns")
table.DownsideRisk(RawData.r[,1:7, drop=F], Rf = RawData.r[,8, drop=F])
table.Drawdowns(RawData.r[,1, drop=F])
results
result
View(RawData.r)
library(ggplot2)
library(reshape2)
library(plyr)
library(zoo)
library(PerformanceAnalytics)
library(scales)
library(quantmod)
library(Hmisc)
#Data management
rm(list =ls(all=TRUE))
RawData <- read.csv("RawData.csv", header=TRUE)
RawData$Date <- as.Date(RawData$Date, format="%d/%m/%Y")
n <-nrow(RawData)
head(RawData)
rownames(RawData) <- RawData$Date
#DOESN'T WORK periodReturn(as.ts(RawData[, 2:3]), period='monhtly')
# there must be something better than this!
RawData$IGNISret <- c(NA,RawData$IGNIS[2:n]/RawData$IGNIS[1:n-1]-1)
RawData$GARTPret <- c(NA,RawData$GARTPAN[2:n]/RawData$GARTPAN[1:n-1]-1)
RawData$JCSCEXPTret <- c(NA,RawData$JCSCEXPT[2:n]/RawData$JCSCEXPT[1:n-1]-1)
RawData$IGNISrr <- RawData$IGNISret - RawData$JCSCEXPTret
RawData$GARTPRrr <- RawData$GARTPret - RawData$JCSCEXPTret
head(RawData)
# relative returns data frame
RawData.rret <- subset(RawData, select=c(IGNISrr,
GARTPRrr))
rownames(RawData.rret) <- RawData$Date
# absolute returns data frame
RawData.r <- subset(RawData, select=c(IGNISret,
GARTPret,
JCSCEXPTret))
RawData.r$Rf <- rep(0,nrow(RawData.r))
rownames(RawData.r) <- RawData$Date
# rolling standard deviation
RollingObs <- 54
RollSd <- data.frame(cbind(RawData$Date,
rollapplyr(RawData[c("IGNISret",
"GARTPret",
"JCSCEXPTret")],
RollingObs, sd, fill=NA)))
colnames(RollSd)[1] <- "Date"
RollSd$Date <- as.Date(RollSd$Date)
head(RollSd)
# charts
chart.Correlation(RawData.rret, histogram = TRUE)
chart.CumReturns(RawData.rret,
wealth.index = TRUE,
legend.loc = "topleft",
begin = "first",
main="Value of $1",
ylab = "'alpha' returns",
xlab = NULL,
date.format = "%b/%y")
chart.CumReturns(RawData.r,
wealth.index = TRUE,
legend.loc = "topleft",
begin = "first",
main="Value of $1",
ylab = "absolute returns",
xlab = NULL,
date.format = "%b/%y")
meltdf<-melt(RollSd,id="Date")
ggplot(na.omit(meltdf),
aes(x=Date, y=value, colour=variable, group=variable, size = variable, linetype = variable)) +
geom_line() +
ylab(paste0("Rolling sd (", toString(RollingObs), "obs)")) +
scale_linetype_manual(values= c(rep("solid",7), "dotted")) +
scale_size_manual(values= c(1, 1, 0.5)) +
theme(legend.position="bottom") +
scale_colour_brewer(palette="Set1")
# extra charts
charts.PerformanceSummary(RawData.rret)
chart.Boxplot(RawData.rret, sort.by = "variance")
chart.RiskReturnScatter(RawData.rret,
add.boxplot = TRUE,
sharpe.ratio = NULL)
chart.RollingPerformance(RawData.rret,
legend.loc = "topright",
begin = "first",
main="rolling 12-weeks performance",
ylab = "'alpha' returns",
xlab = NULL,
date.format = "%b/%y")
# tables
t(table.CalendarReturns(RawData.rret))
result <- t(table.Stats(RawData.rret[, , drop = F]))
textplot(format.df(result, na.blank=TRUE, numeric.dollar=FALSE, cdec=c(rep(1,2),rep(3,14))),
rmar = 0.8, cmar = 1.5,  max.cex=.9, halign = "center", valign = "top",
row.valign="center", wrap.rownames=10, wrap.colnames=10, mar = c(0,0,3,0)+0.1)
title(main="Statistics for relative returns")
table.DownsideRisk(RawData.r[,1:2, drop=F], Rf = RawData.r[,3, drop=F])
table.Drawdowns(RawData.r[,1, drop=F])
